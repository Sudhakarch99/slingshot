function getQueryVariable(a) { for (var b = window.location.search.substring(1), c = b.split("&"), d = 0; d < c.length; d++) { var e = c[d].split("="); if (e[0] === a) return e[1] } return !1 } if (document.all && !window.setTimeout.isPolyfill) { var __nativeST__ = window.setTimeout; window.setTimeout = function (a, b) { var c = Array.prototype.slice.call(arguments, 2); return __nativeST__(a instanceof Function ? function () { a.apply(null, c) } : a, b) }, window.setTimeout.isPolyfill = !0 } if (document.all && !window.setInterval.isPolyfill) { var __nativeSI__ = window.setInterval; window.setInterval = function (a, b) { var c = Array.prototype.slice.call(arguments, 2); return __nativeSI__(a instanceof Function ? function () { a.apply(null, c) } : a, b) }, window.setInterval.isPolyfill = !0 } String.prototype.format || (String.prototype.format = function () { var a = arguments; return this.replace(/{(\d+)}/g, function (b, c) { return "undefined" != typeof a[c] ? a[c] : b }) }); var telemetryObj = function () { var a = {}; return a.logGetTemplate = function (a) { var b = { templateName: a }; window.appInsights.trackEvent("GetLRSTemplate", b), "undefined" != typeof window.mixpanel && window.mixpanel.track("GetLRSTemplate", { properties: this.addMixPanelProperties(b), measurements: null }) }, a.logAuthenticatedUser = function (a) { if (a) { if ("undefined" != typeof window.mixpanel) { var b = a.split("#"); 2 === b.length ? window.mixpanel.alias(b[1]) : window.mixpanel.alias(a) } window.appInsights.setAuthenticatedUserContext(a, "") } }, a.logPageView = function () { if ("undefined" != typeof window.mixpanel) { var b = getQueryVariable("correlationId"); b && window.mixpanel.identify(b), window.mixpanel.track("LRS Deploy Page Viewed", { page: window.location, properties: a.addMixPanelProperties(null), measurements: null }) } }, a.addMixPanelProperties = function (a) { a = a || {}, a.sitename = "functions" }, a.logDeploy = function (b) { var c = { templateName: b }; window.appInsights.trackEvent("LRSDeployStarted", { templateName: b }), "undefined" != typeof window.mixpanel && window.mixpanel.track("LRSDeployStarted", { page: window.location, properties: a.addMixPanelProperties(c), measurements: null }) }, a.logDeploySucceeded = function (b) { var c = { templateName: b }; window.appInsights.trackEvent("LRSDeploySucceeded", c), "undefined" != typeof window.mixpanel && window.mixpanel.track("LRSDeploySucceeded", { page: window.location, properties: a.addMixPanelProperties(c), measurements: null }) }, a.logDeployFailed = function (b) { var c = { templateName: b }; window.appInsights.trackEvent("LRSDeployFailed", c), "undefined" != typeof window.mixpanel && window.mixpanel.track("LRSDeployFailed", { page: window.location, properties: a.addMixPanelProperties(c), measurements: null }) }, a }, constantsObj = function () { var a = {}, b = function () { var a = {}; return a.pollingInterval = 2e3, a }; return a.params = b(), a }, telemetry = telemetryObj(), constants = constantsObj(); !function () { angular.module("formApp", []).filter("camelCaseToHuman", function () { return function (a) { var b = a.name.charAt(0).toUpperCase() + a.name.substr(1).replace(/[A-Z]/g, " $&"); return "" === a.defaultValue ? b + " (Optional)" : b } }).controller("FormController", ["$window", "$scope", "$location", "$http", function (a, b, c, d) { function j() { var a = b.formData.subscription.subscriptionId; b.formData.deploymentSucceeded = !1, b.formData.errorMesg = null, b.formData.statusMesgs = [], telemetry.logDeploy(b.formData.templateName), b.formData.deployPayload = m(b.formData.params), b.formData.statusMesgs.push("Submitting Deployment"), d({ method: "post", url: "api/lrsdeployments/" + a, data: b.formData.deployPayload }).then(function (a) { b.formData.statusMesgs.push("Deployment Started"), window.setTimeout(k, constants.params.pollingInterval, b, d) }, function (a) { b.formData.errorMesg = a.data.error }) } function k(b, c) { var f, d = b.formData.subscription.subscriptionId, e = b.formData.finalResourceGroup; b.formData.repoParamFound && (f = { appServiceName: b.formData.appServiceName }), c({ method: "get", url: "api/lrsdeployments/" + d + "/rg/" + e.name, params: f }).then(function (d) { n(b, d); for (var e = d.data.operations, f = null, j = 0; j < e.value.length; j++) { var l = e.value[j].properties; l.statusMessage && l.statusMessage.error ? f = l.statusMessage.error.message : "Failed" === l.provisioningState && l.statusMessage && l.statusMessage.message && (f = l.statusMessage.message) } f || "Failed" === d.data.provisioningState || "Succeeded" === d.data.provisioningState ? (b.formData.portalUrl = i, b.formData.deploymentSucceeded = "Succeeded" === d.data.provisioningState, b.formData.deploymentSucceeded ? (b.formData.portalUrl = g.format(b.formData.subscription.subscriptionId, b.formData.finalResourceGroup.name, b.formData.appServiceName), telemetry.logDeploySucceeded(b.formData.templateName)) : (b.formData.portalUrl = h.format(b.formData.subscription.subscriptionId, b.formData.finalResourceGroup.name, b.formData.appServiceName), telemetry.logDeployFailed(b.formData.templateName)), a.location.href = b.formData.portalUrl) : window.setTimeout(k, constants.params.pollingInterval, b, c) }, function (a) { b.formData.errorMesg = a.data.error }) } function l(a, b) { if (a.formData.templateName = getQueryVariable("templateName"), telemetry.logPageView(), !a.formData.templateName || 0 === a.formData.templateName.length) { if (!sessionStorage.templateName) return void c.url("https://deploy.azure.com"); a.formData.templateName = sessionStorage.templateName } a.formData.templateName && (sessionStorage.templateName = a.formData.templateName, telemetry.logGetTemplate(a.formData.templateName)), a.formData.templateName && 0 !== a.formData.templateName.length && !a.formData.subscriptions && b({ method: "get", url: "api/lrstemplate", params: { templateName: a.formData.templateName } }).then(function (b) { if (a.formData.userDisplayName = b.data.userDisplayName, a.formData.subscriptions = b.data.subscriptions, a.formData.tenants = b.data.tenants, a.formData.templateName = b.data.templateName, a.formData.appServiceName = b.data.appServiceName, a.formData.appServiceLocation = b.data.appServiceLocation, a.formData.templateNameUrl = b.data.templateUrl, a.formData.email = b.data.email, a.formData.newResourceGroup = { name: b.data.resourceGroupName, location: "" }, telemetry.logAuthenticatedUser(a.formData.email), a.formData.subscriptions && a.formData.subscriptions.length > 0) { var c = a.formData.subscriptions[0]; a.formData.subscription = c } a.formData.params = []; var d = e(); d.name = "appserviceName", d.type = "string", d.value = b.data.appServiceName, d.defaultValue = b.data.appServiceName, a.formData.params.push(d), j() }, function (b) { b.data && (a.formData.errorMesg = b.data.error) }) } function m() { var a = {}, c = b.formData.newResourceGroup; b.formData.finalResourceGroup = c; var d = { name: "appServiceName", value: b.formData.appServiceName }, e = { name: "appServiceLocation", value: b.formData.appServiceLocation }; return a[d.name] = { value: d.value }, a[e.name] = { value: e.value }, c.location = e.value, { parameters: a, subscriptionId: b.formData.subscription.subscriptionId, resourceGroup: c, templateUrl: b.formData.templateNameUrl, repoUrl: sessionStorage.templateName } } function n(a, b) { for (var c = b.data.operations.value, d = c.length - 1; d >= 0; d--) { var e = c[d].properties.targetResource.resourceType, g = e.toLowerCase(); e = f[g] ? f[g] : "Updating " + e, a.formData.statusMesgs.indexOf(e) < 0 && a.formData.statusMesgs.push(e) } } b.formData = {}; var e = function () { var a = {}; return a.name = null, a.type = null, a.defaultValue = null, a.value = null, a }, f = {}; f["microsoft.web/sites"] = "Creating Website", f["microsoft.web/sites/config"] = "Updating Website Config", f["microsoft.web/sites/sourcecontrols"] = "Setting up Source Control", f["microsoft.web/serverfarms"] = "Creating Web Hosting Plan"; var g = "https://portal.azure.com#resource/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Web/sites/{2}/QuickStartSetting", h = "https://portal.azure.com/#asset/HubsExtension/ResourceGroups/subscriptions/{0}/resourceGroups/{1}/Overview", i = "https://portal.azure.com/"; l(b, d) }]) }();